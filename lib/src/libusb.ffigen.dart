// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'libusb_base.dart' as pkg_libusb;

/// Bindings to `libusb.h`.
class Libusb {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Libusb(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Libusb.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  int libusb_init(
    ffi.Pointer<ffi.Pointer<libusb_context>> ctx,
  ) {
    return _libusb_init(
      ctx,
    );
  }

  late final _libusb_initPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Pointer<libusb_context>>)>>('libusb_init');
  late final _libusb_init = _libusb_initPtr.asFunction<int Function(ffi.Pointer<ffi.Pointer<libusb_context>>)>();

  void libusb_exit(
    ffi.Pointer<libusb_context> ctx,
  ) {
    return _libusb_exit(
      ctx,
    );
  }

  late final _libusb_exitPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_context>)>>('libusb_exit');
  late final _libusb_exit = _libusb_exitPtr.asFunction<void Function(ffi.Pointer<libusb_context>)>();

  void libusb_set_debug(
    ffi.Pointer<libusb_context> ctx,
    int level,
  ) {
    return _libusb_set_debug(
      ctx,
      level,
    );
  }

  late final _libusb_set_debugPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_context>, ffi.Int)>>('libusb_set_debug');
  late final _libusb_set_debug = _libusb_set_debugPtr.asFunction<void Function(ffi.Pointer<libusb_context>, int)>();

  void libusb_set_log_cb(
    ffi.Pointer<libusb_context> ctx,
    libusb_log_cb cb,
    int mode,
  ) {
    return _libusb_set_log_cb(
      ctx,
      cb,
      mode,
    );
  }

  late final _libusb_set_log_cbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_context>, libusb_log_cb, ffi.Int)>>('libusb_set_log_cb');
  late final _libusb_set_log_cb = _libusb_set_log_cbPtr.asFunction<void Function(ffi.Pointer<libusb_context>, libusb_log_cb, int)>();

  ffi.Pointer<libusb_version> libusb_get_version() {
    return _libusb_get_version();
  }

  late final _libusb_get_versionPtr = _lookup<ffi.NativeFunction<ffi.Pointer<libusb_version> Function()>>('libusb_get_version');
  late final _libusb_get_version = _libusb_get_versionPtr.asFunction<ffi.Pointer<libusb_version> Function()>();

  int libusb_has_capability(
    int capability,
  ) {
    return _libusb_has_capability(
      capability,
    );
  }

  late final _libusb_has_capabilityPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Uint32)>>('libusb_has_capability');
  late final _libusb_has_capability = _libusb_has_capabilityPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> libusb_error_name(
    int errcode,
  ) {
    return _libusb_error_name(
      errcode,
    );
  }

  late final _libusb_error_namePtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>('libusb_error_name');
  late final _libusb_error_name = _libusb_error_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int libusb_setlocale(
    ffi.Pointer<ffi.Char> locale,
  ) {
    return _libusb_setlocale(
      locale,
    );
  }

  late final _libusb_setlocalePtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>('libusb_setlocale');
  late final _libusb_setlocale = _libusb_setlocalePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> libusb_strerror(
    int errcode,
  ) {
    return _libusb_strerror(
      errcode,
    );
  }

  late final _libusb_strerrorPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>('libusb_strerror');
  late final _libusb_strerror = _libusb_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int libusb_get_device_list(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<libusb_device>>> list,
  ) {
    return _libusb_get_device_list(
      ctx,
      list,
    );
  }

  late final _libusb_get_device_listPtr =
      _lookup<ffi.NativeFunction<pkg_libusb.Ssize Function(ffi.Pointer<libusb_context>, ffi.Pointer<ffi.Pointer<ffi.Pointer<libusb_device>>>)>>(
          'libusb_get_device_list');
  late final _libusb_get_device_list =
      _libusb_get_device_listPtr.asFunction<int Function(ffi.Pointer<libusb_context>, ffi.Pointer<ffi.Pointer<ffi.Pointer<libusb_device>>>)>();

  void libusb_free_device_list(
    ffi.Pointer<ffi.Pointer<libusb_device>> list,
    int unref_devices,
  ) {
    return _libusb_free_device_list(
      list,
      unref_devices,
    );
  }

  late final _libusb_free_device_listPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Pointer<libusb_device>>, ffi.Int)>>('libusb_free_device_list');
  late final _libusb_free_device_list = _libusb_free_device_listPtr.asFunction<void Function(ffi.Pointer<ffi.Pointer<libusb_device>>, int)>();

  ffi.Pointer<libusb_device> libusb_ref_device(
    ffi.Pointer<libusb_device> dev,
  ) {
    return _libusb_ref_device(
      dev,
    );
  }

  late final _libusb_ref_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<libusb_device> Function(ffi.Pointer<libusb_device>)>>('libusb_ref_device');
  late final _libusb_ref_device = _libusb_ref_devicePtr.asFunction<ffi.Pointer<libusb_device> Function(ffi.Pointer<libusb_device>)>();

  void libusb_unref_device(
    ffi.Pointer<libusb_device> dev,
  ) {
    return _libusb_unref_device(
      dev,
    );
  }

  late final _libusb_unref_devicePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_device>)>>('libusb_unref_device');
  late final _libusb_unref_device = _libusb_unref_devicePtr.asFunction<void Function(ffi.Pointer<libusb_device>)>();

  int libusb_get_configuration(
    ffi.Pointer<libusb_device_handle> dev,
    ffi.Pointer<ffi.Int> config,
  ) {
    return _libusb_get_configuration(
      dev,
      config,
    );
  }

  late final _libusb_get_configurationPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Pointer<ffi.Int>)>>('libusb_get_configuration');
  late final _libusb_get_configuration =
      _libusb_get_configurationPtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, ffi.Pointer<ffi.Int>)>();

  int libusb_get_device_descriptor(
    ffi.Pointer<libusb_device> dev,
    ffi.Pointer<libusb_device_descriptor> desc,
  ) {
    return _libusb_get_device_descriptor(
      dev,
      desc,
    );
  }

  late final _libusb_get_device_descriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device>, ffi.Pointer<libusb_device_descriptor>)>>(
          'libusb_get_device_descriptor');
  late final _libusb_get_device_descriptor =
      _libusb_get_device_descriptorPtr.asFunction<int Function(ffi.Pointer<libusb_device>, ffi.Pointer<libusb_device_descriptor>)>();

  int libusb_get_active_config_descriptor(
    ffi.Pointer<libusb_device> dev,
    ffi.Pointer<ffi.Pointer<libusb_config_descriptor>> config,
  ) {
    return _libusb_get_active_config_descriptor(
      dev,
      config,
    );
  }

  late final _libusb_get_active_config_descriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device>, ffi.Pointer<ffi.Pointer<libusb_config_descriptor>>)>>(
          'libusb_get_active_config_descriptor');
  late final _libusb_get_active_config_descriptor = _libusb_get_active_config_descriptorPtr
      .asFunction<int Function(ffi.Pointer<libusb_device>, ffi.Pointer<ffi.Pointer<libusb_config_descriptor>>)>();

  int libusb_get_config_descriptor(
    ffi.Pointer<libusb_device> dev,
    int config_index,
    ffi.Pointer<ffi.Pointer<libusb_config_descriptor>> config,
  ) {
    return _libusb_get_config_descriptor(
      dev,
      config_index,
      config,
    );
  }

  late final _libusb_get_config_descriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device>, ffi.Uint8, ffi.Pointer<ffi.Pointer<libusb_config_descriptor>>)>>(
          'libusb_get_config_descriptor');
  late final _libusb_get_config_descriptor = _libusb_get_config_descriptorPtr
      .asFunction<int Function(ffi.Pointer<libusb_device>, int, ffi.Pointer<ffi.Pointer<libusb_config_descriptor>>)>();

  int libusb_get_config_descriptor_by_value(
    ffi.Pointer<libusb_device> dev,
    int bConfigurationValue,
    ffi.Pointer<ffi.Pointer<libusb_config_descriptor>> config,
  ) {
    return _libusb_get_config_descriptor_by_value(
      dev,
      bConfigurationValue,
      config,
    );
  }

  late final _libusb_get_config_descriptor_by_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device>, ffi.Uint8, ffi.Pointer<ffi.Pointer<libusb_config_descriptor>>)>>(
          'libusb_get_config_descriptor_by_value');
  late final _libusb_get_config_descriptor_by_value = _libusb_get_config_descriptor_by_valuePtr
      .asFunction<int Function(ffi.Pointer<libusb_device>, int, ffi.Pointer<ffi.Pointer<libusb_config_descriptor>>)>();

  void libusb_free_config_descriptor(
    ffi.Pointer<libusb_config_descriptor> config,
  ) {
    return _libusb_free_config_descriptor(
      config,
    );
  }

  late final _libusb_free_config_descriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_config_descriptor>)>>('libusb_free_config_descriptor');
  late final _libusb_free_config_descriptor = _libusb_free_config_descriptorPtr.asFunction<void Function(ffi.Pointer<libusb_config_descriptor>)>();

  int libusb_get_ss_endpoint_companion_descriptor(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<libusb_endpoint_descriptor> endpoint,
    ffi.Pointer<ffi.Pointer<libusb_ss_endpoint_companion_descriptor>> ep_comp,
  ) {
    return _libusb_get_ss_endpoint_companion_descriptor(
      ctx,
      endpoint,
      ep_comp,
    );
  }

  late final _libusb_get_ss_endpoint_companion_descriptorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Pointer<libusb_endpoint_descriptor>,
              ffi.Pointer<ffi.Pointer<libusb_ss_endpoint_companion_descriptor>>)>>('libusb_get_ss_endpoint_companion_descriptor');
  late final _libusb_get_ss_endpoint_companion_descriptor = _libusb_get_ss_endpoint_companion_descriptorPtr.asFunction<
      int Function(
          ffi.Pointer<libusb_context>, ffi.Pointer<libusb_endpoint_descriptor>, ffi.Pointer<ffi.Pointer<libusb_ss_endpoint_companion_descriptor>>)>();

  void libusb_free_ss_endpoint_companion_descriptor(
    ffi.Pointer<libusb_ss_endpoint_companion_descriptor> ep_comp,
  ) {
    return _libusb_free_ss_endpoint_companion_descriptor(
      ep_comp,
    );
  }

  late final _libusb_free_ss_endpoint_companion_descriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_ss_endpoint_companion_descriptor>)>>(
          'libusb_free_ss_endpoint_companion_descriptor');
  late final _libusb_free_ss_endpoint_companion_descriptor =
      _libusb_free_ss_endpoint_companion_descriptorPtr.asFunction<void Function(ffi.Pointer<libusb_ss_endpoint_companion_descriptor>)>();

  int libusb_get_bos_descriptor(
    ffi.Pointer<libusb_device_handle> dev_handle,
    ffi.Pointer<ffi.Pointer<libusb_bos_descriptor>> bos,
  ) {
    return _libusb_get_bos_descriptor(
      dev_handle,
      bos,
    );
  }

  late final _libusb_get_bos_descriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Pointer<ffi.Pointer<libusb_bos_descriptor>>)>>(
          'libusb_get_bos_descriptor');
  late final _libusb_get_bos_descriptor =
      _libusb_get_bos_descriptorPtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, ffi.Pointer<ffi.Pointer<libusb_bos_descriptor>>)>();

  void libusb_free_bos_descriptor(
    ffi.Pointer<libusb_bos_descriptor> bos,
  ) {
    return _libusb_free_bos_descriptor(
      bos,
    );
  }

  late final _libusb_free_bos_descriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_bos_descriptor>)>>('libusb_free_bos_descriptor');
  late final _libusb_free_bos_descriptor = _libusb_free_bos_descriptorPtr.asFunction<void Function(ffi.Pointer<libusb_bos_descriptor>)>();

  int libusb_get_usb_2_0_extension_descriptor(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<libusb_bos_dev_capability_descriptor> dev_cap,
    ffi.Pointer<ffi.Pointer<libusb_usb_2_0_extension_descriptor>> usb_2_0_extension,
  ) {
    return _libusb_get_usb_2_0_extension_descriptor(
      ctx,
      dev_cap,
      usb_2_0_extension,
    );
  }

  late final _libusb_get_usb_2_0_extension_descriptorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Pointer<libusb_bos_dev_capability_descriptor>,
              ffi.Pointer<ffi.Pointer<libusb_usb_2_0_extension_descriptor>>)>>('libusb_get_usb_2_0_extension_descriptor');
  late final _libusb_get_usb_2_0_extension_descriptor = _libusb_get_usb_2_0_extension_descriptorPtr.asFunction<
      int Function(ffi.Pointer<libusb_context>, ffi.Pointer<libusb_bos_dev_capability_descriptor>,
          ffi.Pointer<ffi.Pointer<libusb_usb_2_0_extension_descriptor>>)>();

  void libusb_free_usb_2_0_extension_descriptor(
    ffi.Pointer<libusb_usb_2_0_extension_descriptor> usb_2_0_extension,
  ) {
    return _libusb_free_usb_2_0_extension_descriptor(
      usb_2_0_extension,
    );
  }

  late final _libusb_free_usb_2_0_extension_descriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_usb_2_0_extension_descriptor>)>>('libusb_free_usb_2_0_extension_descriptor');
  late final _libusb_free_usb_2_0_extension_descriptor =
      _libusb_free_usb_2_0_extension_descriptorPtr.asFunction<void Function(ffi.Pointer<libusb_usb_2_0_extension_descriptor>)>();

  int libusb_get_ss_usb_device_capability_descriptor(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<libusb_bos_dev_capability_descriptor> dev_cap,
    ffi.Pointer<ffi.Pointer<libusb_ss_usb_device_capability_descriptor>> ss_usb_device_cap,
  ) {
    return _libusb_get_ss_usb_device_capability_descriptor(
      ctx,
      dev_cap,
      ss_usb_device_cap,
    );
  }

  late final _libusb_get_ss_usb_device_capability_descriptorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Pointer<libusb_bos_dev_capability_descriptor>,
              ffi.Pointer<ffi.Pointer<libusb_ss_usb_device_capability_descriptor>>)>>('libusb_get_ss_usb_device_capability_descriptor');
  late final _libusb_get_ss_usb_device_capability_descriptor = _libusb_get_ss_usb_device_capability_descriptorPtr.asFunction<
      int Function(ffi.Pointer<libusb_context>, ffi.Pointer<libusb_bos_dev_capability_descriptor>,
          ffi.Pointer<ffi.Pointer<libusb_ss_usb_device_capability_descriptor>>)>();

  void libusb_free_ss_usb_device_capability_descriptor(
    ffi.Pointer<libusb_ss_usb_device_capability_descriptor> ss_usb_device_cap,
  ) {
    return _libusb_free_ss_usb_device_capability_descriptor(
      ss_usb_device_cap,
    );
  }

  late final _libusb_free_ss_usb_device_capability_descriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_ss_usb_device_capability_descriptor>)>>(
          'libusb_free_ss_usb_device_capability_descriptor');
  late final _libusb_free_ss_usb_device_capability_descriptor =
      _libusb_free_ss_usb_device_capability_descriptorPtr.asFunction<void Function(ffi.Pointer<libusb_ss_usb_device_capability_descriptor>)>();

  int libusb_get_container_id_descriptor(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<libusb_bos_dev_capability_descriptor> dev_cap,
    ffi.Pointer<ffi.Pointer<libusb_container_id_descriptor>> container_id,
  ) {
    return _libusb_get_container_id_descriptor(
      ctx,
      dev_cap,
      container_id,
    );
  }

  late final _libusb_get_container_id_descriptorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Pointer<libusb_bos_dev_capability_descriptor>,
              ffi.Pointer<ffi.Pointer<libusb_container_id_descriptor>>)>>('libusb_get_container_id_descriptor');
  late final _libusb_get_container_id_descriptor = _libusb_get_container_id_descriptorPtr.asFunction<
      int Function(ffi.Pointer<libusb_context>, ffi.Pointer<libusb_bos_dev_capability_descriptor>,
          ffi.Pointer<ffi.Pointer<libusb_container_id_descriptor>>)>();

  void libusb_free_container_id_descriptor(
    ffi.Pointer<libusb_container_id_descriptor> container_id,
  ) {
    return _libusb_free_container_id_descriptor(
      container_id,
    );
  }

  late final _libusb_free_container_id_descriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_container_id_descriptor>)>>('libusb_free_container_id_descriptor');
  late final _libusb_free_container_id_descriptor =
      _libusb_free_container_id_descriptorPtr.asFunction<void Function(ffi.Pointer<libusb_container_id_descriptor>)>();

  int libusb_get_bus_number(
    ffi.Pointer<libusb_device> dev,
  ) {
    return _libusb_get_bus_number(
      dev,
    );
  }

  late final _libusb_get_bus_numberPtr = _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<libusb_device>)>>('libusb_get_bus_number');
  late final _libusb_get_bus_number = _libusb_get_bus_numberPtr.asFunction<int Function(ffi.Pointer<libusb_device>)>();

  int libusb_get_port_number(
    ffi.Pointer<libusb_device> dev,
  ) {
    return _libusb_get_port_number(
      dev,
    );
  }

  late final _libusb_get_port_numberPtr = _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<libusb_device>)>>('libusb_get_port_number');
  late final _libusb_get_port_number = _libusb_get_port_numberPtr.asFunction<int Function(ffi.Pointer<libusb_device>)>();

  int libusb_get_port_numbers(
    ffi.Pointer<libusb_device> dev,
    ffi.Pointer<ffi.Uint8> port_numbers,
    int port_numbers_len,
  ) {
    return _libusb_get_port_numbers(
      dev,
      port_numbers,
      port_numbers_len,
    );
  }

  late final _libusb_get_port_numbersPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device>, ffi.Pointer<ffi.Uint8>, ffi.Int)>>('libusb_get_port_numbers');
  late final _libusb_get_port_numbers =
      _libusb_get_port_numbersPtr.asFunction<int Function(ffi.Pointer<libusb_device>, ffi.Pointer<ffi.Uint8>, int)>();

  int libusb_get_port_path(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<libusb_device> dev,
    ffi.Pointer<ffi.Uint8> path,
    int path_length,
  ) {
    return _libusb_get_port_path(
      ctx,
      dev,
      path,
      path_length,
    );
  }

  late final _libusb_get_port_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Pointer<libusb_device>, ffi.Pointer<ffi.Uint8>, ffi.Uint8)>>(
          'libusb_get_port_path');
  late final _libusb_get_port_path =
      _libusb_get_port_pathPtr.asFunction<int Function(ffi.Pointer<libusb_context>, ffi.Pointer<libusb_device>, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<libusb_device> libusb_get_parent(
    ffi.Pointer<libusb_device> dev,
  ) {
    return _libusb_get_parent(
      dev,
    );
  }

  late final _libusb_get_parentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<libusb_device> Function(ffi.Pointer<libusb_device>)>>('libusb_get_parent');
  late final _libusb_get_parent = _libusb_get_parentPtr.asFunction<ffi.Pointer<libusb_device> Function(ffi.Pointer<libusb_device>)>();

  int libusb_get_device_address(
    ffi.Pointer<libusb_device> dev,
  ) {
    return _libusb_get_device_address(
      dev,
    );
  }

  late final _libusb_get_device_addressPtr = _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<libusb_device>)>>('libusb_get_device_address');
  late final _libusb_get_device_address = _libusb_get_device_addressPtr.asFunction<int Function(ffi.Pointer<libusb_device>)>();

  int libusb_get_device_speed(
    ffi.Pointer<libusb_device> dev,
  ) {
    return _libusb_get_device_speed(
      dev,
    );
  }

  late final _libusb_get_device_speedPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device>)>>('libusb_get_device_speed');
  late final _libusb_get_device_speed = _libusb_get_device_speedPtr.asFunction<int Function(ffi.Pointer<libusb_device>)>();

  int libusb_get_max_packet_size(
    ffi.Pointer<libusb_device> dev,
    int endpoint,
  ) {
    return _libusb_get_max_packet_size(
      dev,
      endpoint,
    );
  }

  late final _libusb_get_max_packet_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device>, ffi.UnsignedChar)>>('libusb_get_max_packet_size');
  late final _libusb_get_max_packet_size = _libusb_get_max_packet_sizePtr.asFunction<int Function(ffi.Pointer<libusb_device>, int)>();

  int libusb_get_max_iso_packet_size(
    ffi.Pointer<libusb_device> dev,
    int endpoint,
  ) {
    return _libusb_get_max_iso_packet_size(
      dev,
      endpoint,
    );
  }

  late final _libusb_get_max_iso_packet_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device>, ffi.UnsignedChar)>>('libusb_get_max_iso_packet_size');
  late final _libusb_get_max_iso_packet_size = _libusb_get_max_iso_packet_sizePtr.asFunction<int Function(ffi.Pointer<libusb_device>, int)>();

  int libusb_wrap_sys_device(
    ffi.Pointer<libusb_context> ctx,
    int sys_dev,
    ffi.Pointer<ffi.Pointer<libusb_device_handle>> dev_handle,
  ) {
    return _libusb_wrap_sys_device(
      ctx,
      sys_dev,
      dev_handle,
    );
  }

  late final _libusb_wrap_sys_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>, ffi.IntPtr, ffi.Pointer<ffi.Pointer<libusb_device_handle>>)>>(
          'libusb_wrap_sys_device');
  late final _libusb_wrap_sys_device =
      _libusb_wrap_sys_devicePtr.asFunction<int Function(ffi.Pointer<libusb_context>, int, ffi.Pointer<ffi.Pointer<libusb_device_handle>>)>();

  int libusb_open(
    ffi.Pointer<libusb_device> dev,
    ffi.Pointer<ffi.Pointer<libusb_device_handle>> dev_handle,
  ) {
    return _libusb_open(
      dev,
      dev_handle,
    );
  }

  late final _libusb_openPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device>, ffi.Pointer<ffi.Pointer<libusb_device_handle>>)>>('libusb_open');
  late final _libusb_open = _libusb_openPtr.asFunction<int Function(ffi.Pointer<libusb_device>, ffi.Pointer<ffi.Pointer<libusb_device_handle>>)>();

  void libusb_close(
    ffi.Pointer<libusb_device_handle> dev_handle,
  ) {
    return _libusb_close(
      dev_handle,
    );
  }

  late final _libusb_closePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_device_handle>)>>('libusb_close');
  late final _libusb_close = _libusb_closePtr.asFunction<void Function(ffi.Pointer<libusb_device_handle>)>();

  ffi.Pointer<libusb_device> libusb_get_device(
    ffi.Pointer<libusb_device_handle> dev_handle,
  ) {
    return _libusb_get_device(
      dev_handle,
    );
  }

  late final _libusb_get_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<libusb_device> Function(ffi.Pointer<libusb_device_handle>)>>('libusb_get_device');
  late final _libusb_get_device = _libusb_get_devicePtr.asFunction<ffi.Pointer<libusb_device> Function(ffi.Pointer<libusb_device_handle>)>();

  int libusb_set_configuration(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int configuration,
  ) {
    return _libusb_set_configuration(
      dev_handle,
      configuration,
    );
  }

  late final _libusb_set_configurationPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Int)>>('libusb_set_configuration');
  late final _libusb_set_configuration = _libusb_set_configurationPtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, int)>();

  int libusb_claim_interface(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int interface_number,
  ) {
    return _libusb_claim_interface(
      dev_handle,
      interface_number,
    );
  }

  late final _libusb_claim_interfacePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Int)>>('libusb_claim_interface');
  late final _libusb_claim_interface = _libusb_claim_interfacePtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, int)>();

  int libusb_release_interface(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int interface_number,
  ) {
    return _libusb_release_interface(
      dev_handle,
      interface_number,
    );
  }

  late final _libusb_release_interfacePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Int)>>('libusb_release_interface');
  late final _libusb_release_interface = _libusb_release_interfacePtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, int)>();

  ffi.Pointer<libusb_device_handle> libusb_open_device_with_vid_pid(
    ffi.Pointer<libusb_context> ctx,
    int vendor_id,
    int product_id,
  ) {
    return _libusb_open_device_with_vid_pid(
      ctx,
      vendor_id,
      product_id,
    );
  }

  late final _libusb_open_device_with_vid_pidPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<libusb_device_handle> Function(ffi.Pointer<libusb_context>, ffi.Uint16, ffi.Uint16)>>(
          'libusb_open_device_with_vid_pid');
  late final _libusb_open_device_with_vid_pid =
      _libusb_open_device_with_vid_pidPtr.asFunction<ffi.Pointer<libusb_device_handle> Function(ffi.Pointer<libusb_context>, int, int)>();

  int libusb_set_interface_alt_setting(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int interface_number,
    int alternate_setting,
  ) {
    return _libusb_set_interface_alt_setting(
      dev_handle,
      interface_number,
      alternate_setting,
    );
  }

  late final _libusb_set_interface_alt_settingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Int, ffi.Int)>>('libusb_set_interface_alt_setting');
  late final _libusb_set_interface_alt_setting =
      _libusb_set_interface_alt_settingPtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, int, int)>();

  int libusb_clear_halt(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int endpoint,
  ) {
    return _libusb_clear_halt(
      dev_handle,
      endpoint,
    );
  }

  late final _libusb_clear_haltPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.UnsignedChar)>>('libusb_clear_halt');
  late final _libusb_clear_halt = _libusb_clear_haltPtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, int)>();

  int libusb_reset_device(
    ffi.Pointer<libusb_device_handle> dev_handle,
  ) {
    return _libusb_reset_device(
      dev_handle,
    );
  }

  late final _libusb_reset_devicePtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>)>>('libusb_reset_device');
  late final _libusb_reset_device = _libusb_reset_devicePtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>)>();

  int libusb_alloc_streams(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int num_streams,
    ffi.Pointer<ffi.UnsignedChar> endpoints,
    int num_endpoints,
  ) {
    return _libusb_alloc_streams(
      dev_handle,
      num_streams,
      endpoints,
      num_endpoints,
    );
  }

  late final _libusb_alloc_streamsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Uint32, ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>(
          'libusb_alloc_streams');
  late final _libusb_alloc_streams =
      _libusb_alloc_streamsPtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int libusb_free_streams(
    ffi.Pointer<libusb_device_handle> dev_handle,
    ffi.Pointer<ffi.UnsignedChar> endpoints,
    int num_endpoints,
  ) {
    return _libusb_free_streams(
      dev_handle,
      endpoints,
      num_endpoints,
    );
  }

  late final _libusb_free_streamsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('libusb_free_streams');
  late final _libusb_free_streams =
      _libusb_free_streamsPtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.UnsignedChar> libusb_dev_mem_alloc(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int length,
  ) {
    return _libusb_dev_mem_alloc(
      dev_handle,
      length,
    );
  }

  late final _libusb_dev_mem_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<libusb_device_handle>, ffi.Size)>>('libusb_dev_mem_alloc');
  late final _libusb_dev_mem_alloc =
      _libusb_dev_mem_allocPtr.asFunction<ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<libusb_device_handle>, int)>();

  int libusb_dev_mem_free(
    ffi.Pointer<libusb_device_handle> dev_handle,
    ffi.Pointer<ffi.UnsignedChar> buffer,
    int length,
  ) {
    return _libusb_dev_mem_free(
      dev_handle,
      buffer,
      length,
    );
  }

  late final _libusb_dev_mem_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Pointer<ffi.UnsignedChar>, ffi.Size)>>(
          'libusb_dev_mem_free');
  late final _libusb_dev_mem_free =
      _libusb_dev_mem_freePtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int libusb_kernel_driver_active(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int interface_number,
  ) {
    return _libusb_kernel_driver_active(
      dev_handle,
      interface_number,
    );
  }

  late final _libusb_kernel_driver_activePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Int)>>('libusb_kernel_driver_active');
  late final _libusb_kernel_driver_active = _libusb_kernel_driver_activePtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, int)>();

  int libusb_detach_kernel_driver(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int interface_number,
  ) {
    return _libusb_detach_kernel_driver(
      dev_handle,
      interface_number,
    );
  }

  late final _libusb_detach_kernel_driverPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Int)>>('libusb_detach_kernel_driver');
  late final _libusb_detach_kernel_driver = _libusb_detach_kernel_driverPtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, int)>();

  int libusb_attach_kernel_driver(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int interface_number,
  ) {
    return _libusb_attach_kernel_driver(
      dev_handle,
      interface_number,
    );
  }

  late final _libusb_attach_kernel_driverPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Int)>>('libusb_attach_kernel_driver');
  late final _libusb_attach_kernel_driver = _libusb_attach_kernel_driverPtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, int)>();

  int libusb_set_auto_detach_kernel_driver(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int enable,
  ) {
    return _libusb_set_auto_detach_kernel_driver(
      dev_handle,
      enable,
    );
  }

  late final _libusb_set_auto_detach_kernel_driverPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Int)>>('libusb_set_auto_detach_kernel_driver');
  late final _libusb_set_auto_detach_kernel_driver =
      _libusb_set_auto_detach_kernel_driverPtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, int)>();

  ffi.Pointer<libusb_transfer> libusb_alloc_transfer(
    int iso_packets,
  ) {
    return _libusb_alloc_transfer(
      iso_packets,
    );
  }

  late final _libusb_alloc_transferPtr = _lookup<ffi.NativeFunction<ffi.Pointer<libusb_transfer> Function(ffi.Int)>>('libusb_alloc_transfer');
  late final _libusb_alloc_transfer = _libusb_alloc_transferPtr.asFunction<ffi.Pointer<libusb_transfer> Function(int)>();

  int libusb_submit_transfer(
    ffi.Pointer<libusb_transfer> transfer,
  ) {
    return _libusb_submit_transfer(
      transfer,
    );
  }

  late final _libusb_submit_transferPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_transfer>)>>('libusb_submit_transfer');
  late final _libusb_submit_transfer = _libusb_submit_transferPtr.asFunction<int Function(ffi.Pointer<libusb_transfer>)>();

  int libusb_cancel_transfer(
    ffi.Pointer<libusb_transfer> transfer,
  ) {
    return _libusb_cancel_transfer(
      transfer,
    );
  }

  late final _libusb_cancel_transferPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_transfer>)>>('libusb_cancel_transfer');
  late final _libusb_cancel_transfer = _libusb_cancel_transferPtr.asFunction<int Function(ffi.Pointer<libusb_transfer>)>();

  void libusb_free_transfer(
    ffi.Pointer<libusb_transfer> transfer,
  ) {
    return _libusb_free_transfer(
      transfer,
    );
  }

  late final _libusb_free_transferPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_transfer>)>>('libusb_free_transfer');
  late final _libusb_free_transfer = _libusb_free_transferPtr.asFunction<void Function(ffi.Pointer<libusb_transfer>)>();

  void libusb_transfer_set_stream_id(
    ffi.Pointer<libusb_transfer> transfer,
    int stream_id,
  ) {
    return _libusb_transfer_set_stream_id(
      transfer,
      stream_id,
    );
  }

  late final _libusb_transfer_set_stream_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_transfer>, ffi.Uint32)>>('libusb_transfer_set_stream_id');
  late final _libusb_transfer_set_stream_id = _libusb_transfer_set_stream_idPtr.asFunction<void Function(ffi.Pointer<libusb_transfer>, int)>();

  int libusb_transfer_get_stream_id(
    ffi.Pointer<libusb_transfer> transfer,
  ) {
    return _libusb_transfer_get_stream_id(
      transfer,
    );
  }

  late final _libusb_transfer_get_stream_idPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<libusb_transfer>)>>('libusb_transfer_get_stream_id');
  late final _libusb_transfer_get_stream_id = _libusb_transfer_get_stream_idPtr.asFunction<int Function(ffi.Pointer<libusb_transfer>)>();

  int libusb_control_transfer(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int request_type,
    int bRequest,
    int wValue,
    int wIndex,
    ffi.Pointer<ffi.UnsignedChar> data,
    int wLength,
    int timeout,
  ) {
    return _libusb_control_transfer(
      dev_handle,
      request_type,
      bRequest,
      wValue,
      wIndex,
      data,
      wLength,
      timeout,
    );
  }

  late final _libusb_control_transferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Uint8, ffi.Uint8, ffi.Uint16, ffi.Uint16, ffi.Pointer<ffi.UnsignedChar>, ffi.Uint16,
              ffi.UnsignedInt)>>('libusb_control_transfer');
  late final _libusb_control_transfer = _libusb_control_transferPtr
      .asFunction<int Function(ffi.Pointer<libusb_device_handle>, int, int, int, int, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int libusb_bulk_transfer(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int endpoint,
    ffi.Pointer<ffi.UnsignedChar> data,
    int length,
    ffi.Pointer<ffi.Int> actual_length,
    int timeout,
  ) {
    return _libusb_bulk_transfer(
      dev_handle,
      endpoint,
      data,
      length,
      actual_length,
      timeout,
    );
  }

  late final _libusb_bulk_transferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.UnsignedChar, ffi.Pointer<ffi.UnsignedChar>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.UnsignedInt)>>('libusb_bulk_transfer');
  late final _libusb_bulk_transfer = _libusb_bulk_transferPtr
      .asFunction<int Function(ffi.Pointer<libusb_device_handle>, int, ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Int>, int)>();

  int libusb_interrupt_transfer(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int endpoint,
    ffi.Pointer<ffi.UnsignedChar> data,
    int length,
    ffi.Pointer<ffi.Int> actual_length,
    int timeout,
  ) {
    return _libusb_interrupt_transfer(
      dev_handle,
      endpoint,
      data,
      length,
      actual_length,
      timeout,
    );
  }

  late final _libusb_interrupt_transferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.UnsignedChar, ffi.Pointer<ffi.UnsignedChar>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.UnsignedInt)>>('libusb_interrupt_transfer');
  late final _libusb_interrupt_transfer = _libusb_interrupt_transferPtr
      .asFunction<int Function(ffi.Pointer<libusb_device_handle>, int, ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Int>, int)>();

  int libusb_get_string_descriptor_ascii(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int desc_index,
    ffi.Pointer<ffi.UnsignedChar> data,
    int length,
  ) {
    return _libusb_get_string_descriptor_ascii(
      dev_handle,
      desc_index,
      data,
      length,
    );
  }

  late final _libusb_get_string_descriptor_asciiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_device_handle>, ffi.Uint8, ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>(
          'libusb_get_string_descriptor_ascii');
  late final _libusb_get_string_descriptor_ascii =
      _libusb_get_string_descriptor_asciiPtr.asFunction<int Function(ffi.Pointer<libusb_device_handle>, int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int libusb_try_lock_events(
    ffi.Pointer<libusb_context> ctx,
  ) {
    return _libusb_try_lock_events(
      ctx,
    );
  }

  late final _libusb_try_lock_eventsPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>)>>('libusb_try_lock_events');
  late final _libusb_try_lock_events = _libusb_try_lock_eventsPtr.asFunction<int Function(ffi.Pointer<libusb_context>)>();

  void libusb_lock_events(
    ffi.Pointer<libusb_context> ctx,
  ) {
    return _libusb_lock_events(
      ctx,
    );
  }

  late final _libusb_lock_eventsPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_context>)>>('libusb_lock_events');
  late final _libusb_lock_events = _libusb_lock_eventsPtr.asFunction<void Function(ffi.Pointer<libusb_context>)>();

  void libusb_unlock_events(
    ffi.Pointer<libusb_context> ctx,
  ) {
    return _libusb_unlock_events(
      ctx,
    );
  }

  late final _libusb_unlock_eventsPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_context>)>>('libusb_unlock_events');
  late final _libusb_unlock_events = _libusb_unlock_eventsPtr.asFunction<void Function(ffi.Pointer<libusb_context>)>();

  int libusb_event_handling_ok(
    ffi.Pointer<libusb_context> ctx,
  ) {
    return _libusb_event_handling_ok(
      ctx,
    );
  }

  late final _libusb_event_handling_okPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>)>>('libusb_event_handling_ok');
  late final _libusb_event_handling_ok = _libusb_event_handling_okPtr.asFunction<int Function(ffi.Pointer<libusb_context>)>();

  int libusb_event_handler_active(
    ffi.Pointer<libusb_context> ctx,
  ) {
    return _libusb_event_handler_active(
      ctx,
    );
  }

  late final _libusb_event_handler_activePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>)>>('libusb_event_handler_active');
  late final _libusb_event_handler_active = _libusb_event_handler_activePtr.asFunction<int Function(ffi.Pointer<libusb_context>)>();

  void libusb_interrupt_event_handler(
    ffi.Pointer<libusb_context> ctx,
  ) {
    return _libusb_interrupt_event_handler(
      ctx,
    );
  }

  late final _libusb_interrupt_event_handlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_context>)>>('libusb_interrupt_event_handler');
  late final _libusb_interrupt_event_handler = _libusb_interrupt_event_handlerPtr.asFunction<void Function(ffi.Pointer<libusb_context>)>();

  void libusb_lock_event_waiters(
    ffi.Pointer<libusb_context> ctx,
  ) {
    return _libusb_lock_event_waiters(
      ctx,
    );
  }

  late final _libusb_lock_event_waitersPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_context>)>>('libusb_lock_event_waiters');
  late final _libusb_lock_event_waiters = _libusb_lock_event_waitersPtr.asFunction<void Function(ffi.Pointer<libusb_context>)>();

  void libusb_unlock_event_waiters(
    ffi.Pointer<libusb_context> ctx,
  ) {
    return _libusb_unlock_event_waiters(
      ctx,
    );
  }

  late final _libusb_unlock_event_waitersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_context>)>>('libusb_unlock_event_waiters');
  late final _libusb_unlock_event_waiters = _libusb_unlock_event_waitersPtr.asFunction<void Function(ffi.Pointer<libusb_context>)>();

  int libusb_wait_for_event(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<pkg_libusb.Timeval> tv,
  ) {
    return _libusb_wait_for_event(
      ctx,
      tv,
    );
  }

  late final _libusb_wait_for_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Pointer<pkg_libusb.Timeval>)>>('libusb_wait_for_event');
  late final _libusb_wait_for_event =
      _libusb_wait_for_eventPtr.asFunction<int Function(ffi.Pointer<libusb_context>, ffi.Pointer<pkg_libusb.Timeval>)>();

  int libusb_handle_events_timeout(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<pkg_libusb.Timeval> tv,
  ) {
    return _libusb_handle_events_timeout(
      ctx,
      tv,
    );
  }

  late final _libusb_handle_events_timeoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Pointer<pkg_libusb.Timeval>)>>('libusb_handle_events_timeout');
  late final _libusb_handle_events_timeout =
      _libusb_handle_events_timeoutPtr.asFunction<int Function(ffi.Pointer<libusb_context>, ffi.Pointer<pkg_libusb.Timeval>)>();

  int libusb_handle_events_timeout_completed(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<pkg_libusb.Timeval> tv,
    ffi.Pointer<ffi.Int> completed,
  ) {
    return _libusb_handle_events_timeout_completed(
      ctx,
      tv,
      completed,
    );
  }

  late final _libusb_handle_events_timeout_completedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Pointer<pkg_libusb.Timeval>, ffi.Pointer<ffi.Int>)>>(
          'libusb_handle_events_timeout_completed');
  late final _libusb_handle_events_timeout_completed = _libusb_handle_events_timeout_completedPtr
      .asFunction<int Function(ffi.Pointer<libusb_context>, ffi.Pointer<pkg_libusb.Timeval>, ffi.Pointer<ffi.Int>)>();

  int libusb_handle_events(
    ffi.Pointer<libusb_context> ctx,
  ) {
    return _libusb_handle_events(
      ctx,
    );
  }

  late final _libusb_handle_eventsPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>)>>('libusb_handle_events');
  late final _libusb_handle_events = _libusb_handle_eventsPtr.asFunction<int Function(ffi.Pointer<libusb_context>)>();

  int libusb_handle_events_completed(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<ffi.Int> completed,
  ) {
    return _libusb_handle_events_completed(
      ctx,
      completed,
    );
  }

  late final _libusb_handle_events_completedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Pointer<ffi.Int>)>>('libusb_handle_events_completed');
  late final _libusb_handle_events_completed =
      _libusb_handle_events_completedPtr.asFunction<int Function(ffi.Pointer<libusb_context>, ffi.Pointer<ffi.Int>)>();

  int libusb_handle_events_locked(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<pkg_libusb.Timeval> tv,
  ) {
    return _libusb_handle_events_locked(
      ctx,
      tv,
    );
  }

  late final _libusb_handle_events_lockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Pointer<pkg_libusb.Timeval>)>>('libusb_handle_events_locked');
  late final _libusb_handle_events_locked =
      _libusb_handle_events_lockedPtr.asFunction<int Function(ffi.Pointer<libusb_context>, ffi.Pointer<pkg_libusb.Timeval>)>();

  int libusb_pollfds_handle_timeouts(
    ffi.Pointer<libusb_context> ctx,
  ) {
    return _libusb_pollfds_handle_timeouts(
      ctx,
    );
  }

  late final _libusb_pollfds_handle_timeoutsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>)>>('libusb_pollfds_handle_timeouts');
  late final _libusb_pollfds_handle_timeouts = _libusb_pollfds_handle_timeoutsPtr.asFunction<int Function(ffi.Pointer<libusb_context>)>();

  int libusb_get_next_timeout(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<pkg_libusb.Timeval> tv,
  ) {
    return _libusb_get_next_timeout(
      ctx,
      tv,
    );
  }

  late final _libusb_get_next_timeoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Pointer<pkg_libusb.Timeval>)>>('libusb_get_next_timeout');
  late final _libusb_get_next_timeout =
      _libusb_get_next_timeoutPtr.asFunction<int Function(ffi.Pointer<libusb_context>, ffi.Pointer<pkg_libusb.Timeval>)>();

  ffi.Pointer<ffi.Pointer<libusb_pollfd>> libusb_get_pollfds(
    ffi.Pointer<libusb_context> ctx,
  ) {
    return _libusb_get_pollfds(
      ctx,
    );
  }

  late final _libusb_get_pollfdsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<libusb_pollfd>> Function(ffi.Pointer<libusb_context>)>>('libusb_get_pollfds');
  late final _libusb_get_pollfds = _libusb_get_pollfdsPtr.asFunction<ffi.Pointer<ffi.Pointer<libusb_pollfd>> Function(ffi.Pointer<libusb_context>)>();

  void libusb_free_pollfds(
    ffi.Pointer<ffi.Pointer<libusb_pollfd>> pollfds,
  ) {
    return _libusb_free_pollfds(
      pollfds,
    );
  }

  late final _libusb_free_pollfdsPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Pointer<libusb_pollfd>>)>>('libusb_free_pollfds');
  late final _libusb_free_pollfds = _libusb_free_pollfdsPtr.asFunction<void Function(ffi.Pointer<ffi.Pointer<libusb_pollfd>>)>();

  void libusb_set_pollfd_notifiers(
    ffi.Pointer<libusb_context> ctx,
    libusb_pollfd_added_cb added_cb,
    libusb_pollfd_removed_cb removed_cb,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _libusb_set_pollfd_notifiers(
      ctx,
      added_cb,
      removed_cb,
      user_data,
    );
  }

  late final _libusb_set_pollfd_notifiersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<libusb_context>, libusb_pollfd_added_cb, libusb_pollfd_removed_cb, ffi.Pointer<ffi.Void>)>>('libusb_set_pollfd_notifiers');
  late final _libusb_set_pollfd_notifiers = _libusb_set_pollfd_notifiersPtr
      .asFunction<void Function(ffi.Pointer<libusb_context>, libusb_pollfd_added_cb, libusb_pollfd_removed_cb, ffi.Pointer<ffi.Void>)>();

  /// \ingroup libusb_hotplug
  /// Register a hotplug callback function
  ///
  /// Register a callback with the libusb_context. The callback will fire
  /// when a matching event occurs on a matching device. The callback is
  /// armed until either it is deregistered with libusb_hotplug_deregister_callback()
  /// or the supplied callback returns 1 to indicate it is finished processing events.
  ///
  /// If the \ref LIBUSB_HOTPLUG_ENUMERATE is passed the callback will be
  /// called with a \ref LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED for all devices
  /// already plugged into the machine. Note that libusb modifies its internal
  /// device list from a separate thread, while calling hotplug callbacks from
  /// libusb_handle_events(), so it is possible for a device to already be present
  /// on, or removed from, its internal device list, while the hotplug callbacks
  /// still need to be dispatched. This means that when using \ref
  /// LIBUSB_HOTPLUG_ENUMERATE, your callback may be called twice for the arrival
  /// of the same device, once from libusb_hotplug_register_callback() and once
  /// from libusb_handle_events(); and/or your callback may be called for the
  /// removal of a device for which an arrived call was never made.
  ///
  /// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
  ///
  /// \param[in] ctx context to register this callback with
  /// \param[in] events bitwise or of events that will trigger this callback. See \ref
  /// libusb_hotplug_event
  /// \param[in] flags hotplug callback flags. See \ref libusb_hotplug_flag
  /// \param[in] vendor_id the vendor id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY
  /// \param[in] product_id the product id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY
  /// \param[in] dev_class the device class to match or \ref LIBUSB_HOTPLUG_MATCH_ANY
  /// \param[in] cb_fn the function to be invoked on a matching event/device
  /// \param[in] user_data user data to pass to the callback function
  /// \param[out] callback_handle pointer to store the handle of the allocated callback (can be NULL)
  /// \returns LIBUSB_SUCCESS on success LIBUSB_ERROR code on failure
  int libusb_hotplug_register_callback(
    ffi.Pointer<libusb_context> ctx,
    int events,
    int flags,
    int vendor_id,
    int product_id,
    int dev_class,
    libusb_hotplug_callback_fn cb_fn,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<libusb_hotplug_callback_handle> callback_handle,
  ) {
    return _libusb_hotplug_register_callback(
      ctx,
      events,
      flags,
      vendor_id,
      product_id,
      dev_class,
      cb_fn,
      user_data,
      callback_handle,
    );
  }

  late final _libusb_hotplug_register_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Int32, ffi.Int32, ffi.Int, ffi.Int, ffi.Int, libusb_hotplug_callback_fn,
              ffi.Pointer<ffi.Void>, ffi.Pointer<libusb_hotplug_callback_handle>)>>('libusb_hotplug_register_callback');
  late final _libusb_hotplug_register_callback = _libusb_hotplug_register_callbackPtr.asFunction<
      int Function(ffi.Pointer<libusb_context>, int, int, int, int, int, libusb_hotplug_callback_fn, ffi.Pointer<ffi.Void>,
          ffi.Pointer<libusb_hotplug_callback_handle>)>();

  /// \ingroup libusb_hotplug
  /// Deregisters a hotplug callback.
  ///
  /// Deregister a callback from a libusb_context. This function is safe to call from within
  /// a hotplug callback.
  ///
  /// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
  ///
  /// \param[in] ctx context this callback is registered with
  /// \param[in] callback_handle the handle of the callback to deregister
  void libusb_hotplug_deregister_callback(
    ffi.Pointer<libusb_context> ctx,
    int callback_handle,
  ) {
    return _libusb_hotplug_deregister_callback(
      ctx,
      callback_handle,
    );
  }

  late final _libusb_hotplug_deregister_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_context>, libusb_hotplug_callback_handle)>>(
          'libusb_hotplug_deregister_callback');
  late final _libusb_hotplug_deregister_callback =
      _libusb_hotplug_deregister_callbackPtr.asFunction<void Function(ffi.Pointer<libusb_context>, int)>();

  int libusb_set_option(
    ffi.Pointer<libusb_context> ctx,
    int option,
  ) {
    return _libusb_set_option(
      ctx,
      option,
    );
  }

  late final _libusb_set_optionPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Int32)>>('libusb_set_option');
  late final _libusb_set_option = _libusb_set_optionPtr.asFunction<int Function(ffi.Pointer<libusb_context>, int)>();
}

/// \ingroup libusb_desc
/// Device and/or Interface Class codes
abstract class libusb_class_code {
  /// In the context of a \ref libusb_device_descriptor "device descriptor",
  /// this bDeviceClass value indicates that each interface specifies its
  /// own class information and all interfaces operate independently.
  static const int LIBUSB_CLASS_PER_INTERFACE = 0;

  /// Audio class
  static const int LIBUSB_CLASS_AUDIO = 1;

  /// Communications class
  static const int LIBUSB_CLASS_COMM = 2;

  /// Human Interface Device class
  static const int LIBUSB_CLASS_HID = 3;

  /// Physical
  static const int LIBUSB_CLASS_PHYSICAL = 5;

  /// Printer class
  static const int LIBUSB_CLASS_PRINTER = 7;

  /// Image class
  static const int LIBUSB_CLASS_PTP = 6;
  static const int LIBUSB_CLASS_IMAGE = 6;

  /// Mass storage class
  static const int LIBUSB_CLASS_MASS_STORAGE = 8;

  /// Hub class
  static const int LIBUSB_CLASS_HUB = 9;

  /// Data class
  static const int LIBUSB_CLASS_DATA = 10;

  /// Smart Card
  static const int LIBUSB_CLASS_SMART_CARD = 11;

  /// Content Security
  static const int LIBUSB_CLASS_CONTENT_SECURITY = 13;

  /// Video
  static const int LIBUSB_CLASS_VIDEO = 14;

  /// Personal Healthcare
  static const int LIBUSB_CLASS_PERSONAL_HEALTHCARE = 15;

  /// Diagnostic Device
  static const int LIBUSB_CLASS_DIAGNOSTIC_DEVICE = 220;

  /// Wireless class
  static const int LIBUSB_CLASS_WIRELESS = 224;

  /// Application class
  static const int LIBUSB_CLASS_APPLICATION = 254;

  /// Class is vendor-specific
  static const int LIBUSB_CLASS_VENDOR_SPEC = 255;
}

/// \ingroup libusb_desc
/// Descriptor types as defined by the USB specification.
abstract class libusb_descriptor_type {
  /// Device descriptor. See libusb_device_descriptor.
  static const int LIBUSB_DT_DEVICE = 1;

  /// Configuration descriptor. See libusb_config_descriptor.
  static const int LIBUSB_DT_CONFIG = 2;

  /// String descriptor
  static const int LIBUSB_DT_STRING = 3;

  /// Interface descriptor. See libusb_interface_descriptor.
  static const int LIBUSB_DT_INTERFACE = 4;

  /// Endpoint descriptor. See libusb_endpoint_descriptor.
  static const int LIBUSB_DT_ENDPOINT = 5;

  /// BOS descriptor
  static const int LIBUSB_DT_BOS = 15;

  /// Device Capability descriptor
  static const int LIBUSB_DT_DEVICE_CAPABILITY = 16;

  /// HID descriptor
  static const int LIBUSB_DT_HID = 33;

  /// HID report descriptor
  static const int LIBUSB_DT_REPORT = 34;

  /// Physical descriptor
  static const int LIBUSB_DT_PHYSICAL = 35;

  /// Hub descriptor
  static const int LIBUSB_DT_HUB = 41;

  /// SuperSpeed Hub descriptor
  static const int LIBUSB_DT_SUPERSPEED_HUB = 42;

  /// SuperSpeed Endpoint Companion descriptor
  static const int LIBUSB_DT_SS_ENDPOINT_COMPANION = 48;
}

/// \ingroup libusb_desc
/// Endpoint direction. Values for bit 7 of the
/// \ref libusb_endpoint_descriptor::bEndpointAddress "endpoint address" scheme.
abstract class libusb_endpoint_direction {
  /// In: device-to-host
  static const int LIBUSB_ENDPOINT_IN = 128;

  /// Out: host-to-device
  static const int LIBUSB_ENDPOINT_OUT = 0;
}

/// \ingroup libusb_desc
/// Endpoint transfer type. Values for bits 0:1 of the
/// \ref libusb_endpoint_descriptor::bmAttributes "endpoint attributes" field.
abstract class libusb_transfer_type {
  /// Control endpoint
  static const int LIBUSB_TRANSFER_TYPE_CONTROL = 0;

  /// Isochronous endpoint
  static const int LIBUSB_TRANSFER_TYPE_ISOCHRONOUS = 1;

  /// Bulk endpoint
  static const int LIBUSB_TRANSFER_TYPE_BULK = 2;

  /// Interrupt endpoint
  static const int LIBUSB_TRANSFER_TYPE_INTERRUPT = 3;

  /// Stream endpoint
  static const int LIBUSB_TRANSFER_TYPE_BULK_STREAM = 4;
}

/// \ingroup libusb_misc
/// Standard requests, as defined in table 9-5 of the USB 3.0 specifications
abstract class libusb_standard_request {
  /// Request status of the specific recipient
  static const int LIBUSB_REQUEST_GET_STATUS = 0;

  /// Clear or disable a specific feature
  static const int LIBUSB_REQUEST_CLEAR_FEATURE = 1;

  /// Set or enable a specific feature
  static const int LIBUSB_REQUEST_SET_FEATURE = 3;

  /// Set device address for all future accesses
  static const int LIBUSB_REQUEST_SET_ADDRESS = 5;

  /// Get the specified descriptor
  static const int LIBUSB_REQUEST_GET_DESCRIPTOR = 6;

  /// Used to update existing descriptors or add new descriptors
  static const int LIBUSB_REQUEST_SET_DESCRIPTOR = 7;

  /// Get the current device configuration value
  static const int LIBUSB_REQUEST_GET_CONFIGURATION = 8;

  /// Set device configuration
  static const int LIBUSB_REQUEST_SET_CONFIGURATION = 9;

  /// Return the selected alternate setting for the specified interface
  static const int LIBUSB_REQUEST_GET_INTERFACE = 10;

  /// Select an alternate interface for the specified interface
  static const int LIBUSB_REQUEST_SET_INTERFACE = 11;

  /// Set then report an endpoint's synchronization frame
  static const int LIBUSB_REQUEST_SYNCH_FRAME = 12;

  /// Sets both the U1 and U2 Exit Latency
  static const int LIBUSB_REQUEST_SET_SEL = 48;

  /// Delay from the time a host transmits a packet to the time it is
  /// received by the device.
  static const int LIBUSB_SET_ISOCH_DELAY = 49;
}

/// \ingroup libusb_misc
/// Request type bits of the
/// \ref libusb_control_setup::bmRequestType "bmRequestType" field in control
/// transfers.
abstract class libusb_request_type {
  /// Standard
  static const int LIBUSB_REQUEST_TYPE_STANDARD = 0;

  /// Class
  static const int LIBUSB_REQUEST_TYPE_CLASS = 32;

  /// Vendor
  static const int LIBUSB_REQUEST_TYPE_VENDOR = 64;

  /// Reserved
  static const int LIBUSB_REQUEST_TYPE_RESERVED = 96;
}

/// \ingroup libusb_misc
/// Recipient bits of the
/// \ref libusb_control_setup::bmRequestType "bmRequestType" field in control
/// transfers. Values 4 through 31 are reserved.
abstract class libusb_request_recipient {
  /// Device
  static const int LIBUSB_RECIPIENT_DEVICE = 0;

  /// Interface
  static const int LIBUSB_RECIPIENT_INTERFACE = 1;

  /// Endpoint
  static const int LIBUSB_RECIPIENT_ENDPOINT = 2;

  /// Other
  static const int LIBUSB_RECIPIENT_OTHER = 3;
}

/// \ingroup libusb_desc
/// Synchronization type for isochronous endpoints. Values for bits 2:3 of the
/// \ref libusb_endpoint_descriptor::bmAttributes "bmAttributes" field in
/// libusb_endpoint_descriptor.
abstract class libusb_iso_sync_type {
  /// No synchronization
  static const int LIBUSB_ISO_SYNC_TYPE_NONE = 0;

  /// Asynchronous
  static const int LIBUSB_ISO_SYNC_TYPE_ASYNC = 1;

  /// Adaptive
  static const int LIBUSB_ISO_SYNC_TYPE_ADAPTIVE = 2;

  /// Synchronous
  static const int LIBUSB_ISO_SYNC_TYPE_SYNC = 3;
}

/// \ingroup libusb_desc
/// Usage type for isochronous endpoints. Values for bits 4:5 of the
/// \ref libusb_endpoint_descriptor::bmAttributes "bmAttributes" field in
/// libusb_endpoint_descriptor.
abstract class libusb_iso_usage_type {
  /// Data endpoint
  static const int LIBUSB_ISO_USAGE_TYPE_DATA = 0;

  /// Feedback endpoint
  static const int LIBUSB_ISO_USAGE_TYPE_FEEDBACK = 1;

  /// Implicit feedback Data endpoint
  static const int LIBUSB_ISO_USAGE_TYPE_IMPLICIT = 2;
}

/// \ingroup libusb_desc
/// A structure representing the standard USB device descriptor. This
/// descriptor is documented in section 9.6.1 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_device_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_DEVICE LIBUSB_DT_DEVICE in this
  /// context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// USB specification release number in binary-coded decimal. A value of
  /// 0x0200 indicates USB 2.0, 0x0110 indicates USB 1.1, etc.
  @ffi.Uint16()
  external int bcdUSB;

  /// USB-IF class code for the device. See \ref libusb_class_code.
  @ffi.Uint8()
  external int bDeviceClass;

  /// USB-IF subclass code for the device, qualified by the bDeviceClass
  /// value
  @ffi.Uint8()
  external int bDeviceSubClass;

  /// USB-IF protocol code for the device, qualified by the bDeviceClass and
  /// bDeviceSubClass values
  @ffi.Uint8()
  external int bDeviceProtocol;

  /// Maximum packet size for endpoint 0
  @ffi.Uint8()
  external int bMaxPacketSize0;

  /// USB-IF vendor ID
  @ffi.Uint16()
  external int idVendor;

  /// USB-IF product ID
  @ffi.Uint16()
  external int idProduct;

  /// Device release number in binary-coded decimal
  @ffi.Uint16()
  external int bcdDevice;

  /// Index of string descriptor describing manufacturer
  @ffi.Uint8()
  external int iManufacturer;

  /// Index of string descriptor describing product
  @ffi.Uint8()
  external int iProduct;

  /// Index of string descriptor containing device serial number
  @ffi.Uint8()
  external int iSerialNumber;

  /// Number of possible configurations
  @ffi.Uint8()
  external int bNumConfigurations;
}

/// \ingroup libusb_desc
/// A structure representing the standard USB endpoint descriptor. This
/// descriptor is documented in section 9.6.6 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_endpoint_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_ENDPOINT LIBUSB_DT_ENDPOINT in
  /// this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// The address of the endpoint described by this descriptor. Bits 0:3 are
  /// the endpoint number. Bits 4:6 are reserved. Bit 7 indicates direction,
  /// see \ref libusb_endpoint_direction.
  @ffi.Uint8()
  external int bEndpointAddress;

  /// Attributes which apply to the endpoint when it is configured using
  /// the bConfigurationValue. Bits 0:1 determine the transfer type and
  /// correspond to \ref libusb_transfer_type. Bits 2:3 are only used for
  /// isochronous endpoints and correspond to \ref libusb_iso_sync_type.
  /// Bits 4:5 are also only used for isochronous endpoints and correspond to
  /// \ref libusb_iso_usage_type. Bits 6:7 are reserved.
  @ffi.Uint8()
  external int bmAttributes;

  /// Maximum packet size this endpoint is capable of sending/receiving.
  @ffi.Uint16()
  external int wMaxPacketSize;

  /// Interval for polling endpoint for data transfers.
  @ffi.Uint8()
  external int bInterval;

  /// For audio devices only: the rate at which synchronization feedback
  /// is provided.
  @ffi.Uint8()
  external int bRefresh;

  /// For audio devices only: the address if the synch endpoint
  @ffi.Uint8()
  external int bSynchAddress;

  /// Extra descriptors. If libusb encounters unknown endpoint descriptors,
  /// it will store them here, should you wish to parse them.
  external ffi.Pointer<ffi.UnsignedChar> extra;

  /// Length of the extra descriptors, in bytes. Must be non-negative.
  @ffi.Int()
  external int extra_length;
}

/// \ingroup libusb_desc
/// A structure representing the standard USB interface descriptor. This
/// descriptor is documented in section 9.6.5 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_interface_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_INTERFACE LIBUSB_DT_INTERFACE
  /// in this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// Number of this interface
  @ffi.Uint8()
  external int bInterfaceNumber;

  /// Value used to select this alternate setting for this interface
  @ffi.Uint8()
  external int bAlternateSetting;

  /// Number of endpoints used by this interface (excluding the control
  /// endpoint).
  @ffi.Uint8()
  external int bNumEndpoints;

  /// USB-IF class code for this interface. See \ref libusb_class_code.
  @ffi.Uint8()
  external int bInterfaceClass;

  /// USB-IF subclass code for this interface, qualified by the
  /// bInterfaceClass value
  @ffi.Uint8()
  external int bInterfaceSubClass;

  /// USB-IF protocol code for this interface, qualified by the
  /// bInterfaceClass and bInterfaceSubClass values
  @ffi.Uint8()
  external int bInterfaceProtocol;

  /// Index of string descriptor describing this interface
  @ffi.Uint8()
  external int iInterface;

  /// Array of endpoint descriptors. This length of this array is determined
  /// by the bNumEndpoints field.
  external ffi.Pointer<libusb_endpoint_descriptor> endpoint;

  /// Extra descriptors. If libusb encounters unknown interface descriptors,
  /// it will store them here, should you wish to parse them.
  external ffi.Pointer<ffi.UnsignedChar> extra;

  /// Length of the extra descriptors, in bytes. Must be non-negative.
  @ffi.Int()
  external int extra_length;
}

/// \ingroup libusb_desc
/// A collection of alternate settings for a particular USB interface.
class libusb_interface extends ffi.Struct {
  /// Array of interface descriptors. The length of this array is determined
  /// by the num_altsetting field.
  external ffi.Pointer<libusb_interface_descriptor> altsetting;

  /// The number of alternate settings that belong to this interface.
  /// Must be non-negative.
  @ffi.Int()
  external int num_altsetting;
}

/// \ingroup libusb_desc
/// A structure representing the standard USB configuration descriptor. This
/// descriptor is documented in section 9.6.3 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_config_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_CONFIG LIBUSB_DT_CONFIG
  /// in this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// Total length of data returned for this configuration
  @ffi.Uint16()
  external int wTotalLength;

  /// Number of interfaces supported by this configuration
  @ffi.Uint8()
  external int bNumInterfaces;

  /// Identifier value for this configuration
  @ffi.Uint8()
  external int bConfigurationValue;

  /// Index of string descriptor describing this configuration
  @ffi.Uint8()
  external int iConfiguration;

  /// Configuration characteristics
  @ffi.Uint8()
  external int bmAttributes;

  /// Maximum power consumption of the USB device from this bus in this
  /// configuration when the device is fully operation. Expressed in units
  /// of 2 mA when the device is operating in high-speed mode and in units
  /// of 8 mA when the device is operating in super-speed mode.
  @ffi.Uint8()
  external int MaxPower;

  /// Array of interfaces supported by this configuration. The length of
  /// this array is determined by the bNumInterfaces field.
  external ffi.Pointer<libusb_interface> interface1;

  /// Extra descriptors. If libusb encounters unknown configuration
  /// descriptors, it will store them here, should you wish to parse them.
  external ffi.Pointer<ffi.UnsignedChar> extra;

  /// Length of the extra descriptors, in bytes. Must be non-negative.
  @ffi.Int()
  external int extra_length;
}

/// \ingroup libusb_desc
/// A structure representing the superspeed endpoint companion
/// descriptor. This descriptor is documented in section 9.6.7 of
/// the USB 3.0 specification. All multiple-byte fields are represented in
/// host-endian format.
class libusb_ss_endpoint_companion_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_SS_ENDPOINT_COMPANION in
  /// this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// The maximum number of packets the endpoint can send or
  /// receive as part of a burst.
  @ffi.Uint8()
  external int bMaxBurst;

  /// In bulk EP:	bits 4:0 represents the	maximum	number of
  /// streams the	EP supports. In	isochronous EP:	bits 1:0
  /// represents the Mult	- a zero based value that determines
  /// the	maximum	number of packets within a service interval
  @ffi.Uint8()
  external int bmAttributes;

  /// The	total number of bytes this EP will transfer every
  /// service interval. valid only for periodic EPs.
  @ffi.Uint16()
  external int wBytesPerInterval;
}

/// \ingroup libusb_desc
/// A generic representation of a BOS Device Capability descriptor. It is
/// advised to check bDevCapabilityType and call the matching
/// libusb_get_*_descriptor function to get a structure fully matching the type.
class libusb_bos_dev_capability_descriptor extends ffi.Opaque {}

/// \ingroup libusb_desc
/// A structure representing the Binary Device Object Store (BOS) descriptor.
/// This descriptor is documented in section 9.6.2 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_bos_descriptor extends ffi.Opaque {}

/// \ingroup libusb_desc
/// A structure representing the USB 2.0 Extension descriptor
/// This descriptor is documented in section 9.6.2.1 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_usb_2_0_extension_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_DEVICE_CAPABILITY
  /// LIBUSB_DT_DEVICE_CAPABILITY in this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// Capability type. Will have value
  /// \ref libusb_capability_type::LIBUSB_BT_USB_2_0_EXTENSION
  /// LIBUSB_BT_USB_2_0_EXTENSION in this context.
  @ffi.Uint8()
  external int bDevCapabilityType;

  /// Bitmap encoding of supported device level features.
  /// A value of one in a bit location indicates a feature is
  /// supported; a value of zero indicates it is not supported.
  /// See \ref libusb_usb_2_0_extension_attributes.
  @ffi.Uint32()
  external int bmAttributes;
}

/// \ingroup libusb_desc
/// A structure representing the SuperSpeed USB Device Capability descriptor
/// This descriptor is documented in section 9.6.2.2 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_ss_usb_device_capability_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_DEVICE_CAPABILITY
  /// LIBUSB_DT_DEVICE_CAPABILITY in this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// Capability type. Will have value
  /// \ref libusb_capability_type::LIBUSB_BT_SS_USB_DEVICE_CAPABILITY
  /// LIBUSB_BT_SS_USB_DEVICE_CAPABILITY in this context.
  @ffi.Uint8()
  external int bDevCapabilityType;

  /// Bitmap encoding of supported device level features.
  /// A value of one in a bit location indicates a feature is
  /// supported; a value of zero indicates it is not supported.
  /// See \ref libusb_ss_usb_device_capability_attributes.
  @ffi.Uint8()
  external int bmAttributes;

  /// Bitmap encoding of the speed supported by this device when
  /// operating in SuperSpeed mode. See \ref libusb_supported_speed.
  @ffi.Uint16()
  external int wSpeedSupported;

  /// The lowest speed at which all the functionality supported
  /// by the device is available to the user. For example if the
  /// device supports all its functionality when connected at
  /// full speed and above then it sets this value to 1.
  @ffi.Uint8()
  external int bFunctionalitySupport;

  /// U1 Device Exit Latency.
  @ffi.Uint8()
  external int bU1DevExitLat;

  /// U2 Device Exit Latency.
  @ffi.Uint16()
  external int bU2DevExitLat;
}

/// \ingroup libusb_desc
/// A structure representing the Container ID descriptor.
/// This descriptor is documented in section 9.6.2.3 of the USB 3.0 specification.
/// All multiple-byte fields, except UUIDs, are represented in host-endian format.
class libusb_container_id_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_DEVICE_CAPABILITY
  /// LIBUSB_DT_DEVICE_CAPABILITY in this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// Capability type. Will have value
  /// \ref libusb_capability_type::LIBUSB_BT_CONTAINER_ID
  /// LIBUSB_BT_CONTAINER_ID in this context.
  @ffi.Uint8()
  external int bDevCapabilityType;

  /// Reserved field
  @ffi.Uint8()
  external int bReserved;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ContainerID;
}

/// \ingroup libusb_asyncio
/// Setup packet for control transfers.
class libusb_control_setup extends ffi.Struct {
  /// Request type. Bits 0:4 determine recipient, see
  /// \ref libusb_request_recipient. Bits 5:6 determine type, see
  /// \ref libusb_request_type. Bit 7 determines data transfer direction, see
  /// \ref libusb_endpoint_direction.
  @ffi.Uint8()
  external int bmRequestType;

  /// Request. If the type bits of bmRequestType are equal to
  /// \ref libusb_request_type::LIBUSB_REQUEST_TYPE_STANDARD
  /// "LIBUSB_REQUEST_TYPE_STANDARD" then this field refers to
  /// \ref libusb_standard_request. For other cases, use of this field is
  /// application-specific.
  @ffi.Uint8()
  external int bRequest;

  /// Value. Varies according to request
  @ffi.Uint16()
  external int wValue;

  /// Index. Varies according to request, typically used to pass an index
  /// or offset
  @ffi.Uint16()
  external int wIndex;

  /// Number of bytes to transfer
  @ffi.Uint16()
  external int wLength;
}

class libusb_context extends ffi.Opaque {}

class libusb_device extends ffi.Opaque {}

class libusb_device_handle extends ffi.Opaque {}

/// \ingroup libusb_lib
/// Structure providing the version of the libusb runtime
class libusb_version extends ffi.Struct {
  /// Library major version.
  @ffi.Uint16()
  external int major;

  /// Library minor version.
  @ffi.Uint16()
  external int minor;

  /// Library micro version.
  @ffi.Uint16()
  external int micro;

  /// Library nano version.
  @ffi.Uint16()
  external int nano;

  /// Library release candidate suffix string, e.g. "-rc4".
  external ffi.Pointer<ffi.Char> rc;

  /// For ABI compatibility only.
  external ffi.Pointer<ffi.Char> describe;
}

/// \ingroup libusb_dev
/// Speed codes. Indicates the speed at which the device is operating.
abstract class libusb_speed {
  /// The OS doesn't report or know the device speed.
  static const int LIBUSB_SPEED_UNKNOWN = 0;

  /// The device is operating at low speed (1.5MBit/s).
  static const int LIBUSB_SPEED_LOW = 1;

  /// The device is operating at full speed (12MBit/s).
  static const int LIBUSB_SPEED_FULL = 2;

  /// The device is operating at high speed (480MBit/s).
  static const int LIBUSB_SPEED_HIGH = 3;

  /// The device is operating at super speed (5000MBit/s).
  static const int LIBUSB_SPEED_SUPER = 4;

  /// The device is operating at super speed plus (10000MBit/s).
  static const int LIBUSB_SPEED_SUPER_PLUS = 5;
}

/// \ingroup libusb_dev
/// Supported speeds (wSpeedSupported) bitfield. Indicates what
/// speeds the device supports.
abstract class libusb_supported_speed {
  /// Low speed operation supported (1.5MBit/s).
  static const int LIBUSB_LOW_SPEED_OPERATION = 1;

  /// Full speed operation supported (12MBit/s).
  static const int LIBUSB_FULL_SPEED_OPERATION = 2;

  /// High speed operation supported (480MBit/s).
  static const int LIBUSB_HIGH_SPEED_OPERATION = 4;

  /// Superspeed operation supported (5000MBit/s).
  static const int LIBUSB_SUPER_SPEED_OPERATION = 8;
}

/// \ingroup libusb_dev
/// Masks for the bits of the
/// \ref libusb_usb_2_0_extension_descriptor::bmAttributes "bmAttributes" field
/// of the USB 2.0 Extension descriptor.
abstract class libusb_usb_2_0_extension_attributes {
  /// Supports Link Power Management (LPM)
  static const int LIBUSB_BM_LPM_SUPPORT = 2;
}

/// \ingroup libusb_dev
/// Masks for the bits of the
/// \ref libusb_ss_usb_device_capability_descriptor::bmAttributes "bmAttributes" field
/// field of the SuperSpeed USB Device Capability descriptor.
abstract class libusb_ss_usb_device_capability_attributes {
  /// Supports Latency Tolerance Messages (LTM)
  static const int LIBUSB_BM_LTM_SUPPORT = 2;
}

/// \ingroup libusb_dev
/// USB capability types
abstract class libusb_bos_type {
  /// Wireless USB device capability
  static const int LIBUSB_BT_WIRELESS_USB_DEVICE_CAPABILITY = 1;

  /// USB 2.0 extensions
  static const int LIBUSB_BT_USB_2_0_EXTENSION = 2;

  /// SuperSpeed USB device capability
  static const int LIBUSB_BT_SS_USB_DEVICE_CAPABILITY = 3;

  /// Container ID type
  static const int LIBUSB_BT_CONTAINER_ID = 4;
}

/// \ingroup libusb_misc
/// Error codes. Most libusb functions return 0 on success or one of these
/// codes on failure.
/// You can call libusb_error_name() to retrieve a string representation of an
/// error code or libusb_strerror() to get an end-user suitable description of
/// an error code.
abstract class libusb_error {
  /// Success (no error)
  static const int LIBUSB_SUCCESS = 0;

  /// Input/output error
  static const int LIBUSB_ERROR_IO = -1;

  /// Invalid parameter
  static const int LIBUSB_ERROR_INVALID_PARAM = -2;

  /// Access denied (insufficient permissions)
  static const int LIBUSB_ERROR_ACCESS = -3;

  /// No such device (it may have been disconnected)
  static const int LIBUSB_ERROR_NO_DEVICE = -4;

  /// Entity not found
  static const int LIBUSB_ERROR_NOT_FOUND = -5;

  /// Resource busy
  static const int LIBUSB_ERROR_BUSY = -6;

  /// Operation timed out
  static const int LIBUSB_ERROR_TIMEOUT = -7;

  /// Overflow
  static const int LIBUSB_ERROR_OVERFLOW = -8;

  /// Pipe error
  static const int LIBUSB_ERROR_PIPE = -9;

  /// System call interrupted (perhaps due to signal)
  static const int LIBUSB_ERROR_INTERRUPTED = -10;

  /// Insufficient memory
  static const int LIBUSB_ERROR_NO_MEM = -11;

  /// Operation not supported or unimplemented on this platform
  static const int LIBUSB_ERROR_NOT_SUPPORTED = -12;

  /// Other error
  static const int LIBUSB_ERROR_OTHER = -99;
}

/// \ingroup libusb_asyncio
/// Transfer status codes
abstract class libusb_transfer_status {
  /// Transfer completed without error. Note that this does not indicate
  /// that the entire amount of requested data was transferred.
  static const int LIBUSB_TRANSFER_COMPLETED = 0;

  /// Transfer failed
  static const int LIBUSB_TRANSFER_ERROR = 1;

  /// Transfer timed out
  static const int LIBUSB_TRANSFER_TIMED_OUT = 2;

  /// Transfer was cancelled
  static const int LIBUSB_TRANSFER_CANCELLED = 3;

  /// For bulk/interrupt endpoints: halt condition detected (endpoint
  /// stalled). For control endpoints: control request not supported.
  static const int LIBUSB_TRANSFER_STALL = 4;

  /// Device was disconnected
  static const int LIBUSB_TRANSFER_NO_DEVICE = 5;

  /// Device sent more data than requested
  static const int LIBUSB_TRANSFER_OVERFLOW = 6;
}

/// \ingroup libusb_asyncio
/// libusb_transfer.flags values
abstract class libusb_transfer_flags {
  /// Report short frames as errors
  static const int LIBUSB_TRANSFER_SHORT_NOT_OK = 1;

  /// Automatically free() transfer buffer during libusb_free_transfer().
  /// Note that buffers allocated with libusb_dev_mem_alloc() should not
  /// be attempted freed in this way, since free() is not an appropriate
  /// way to release such memory.
  static const int LIBUSB_TRANSFER_FREE_BUFFER = 2;

  /// Automatically call libusb_free_transfer() after callback returns.
  /// If this flag is set, it is illegal to call libusb_free_transfer()
  /// from your transfer callback, as this will result in a double-free
  /// when this flag is acted upon.
  static const int LIBUSB_TRANSFER_FREE_TRANSFER = 4;

  /// Terminate transfers that are a multiple of the endpoint's
  /// wMaxPacketSize with an extra zero length packet. This is useful
  /// when a device protocol mandates that each logical request is
  /// terminated by an incomplete packet (i.e. the logical requests are
  /// not separated by other means).
  ///
  /// This flag only affects host-to-device transfers to bulk and interrupt
  /// endpoints. In other situations, it is ignored.
  ///
  /// This flag only affects transfers with a length that is a multiple of
  /// the endpoint's wMaxPacketSize. On transfers of other lengths, this
  /// flag has no effect. Therefore, if you are working with a device that
  /// needs a ZLP whenever the end of the logical request falls on a packet
  /// boundary, then it is sensible to set this flag on <em>every</em>
  /// transfer (you do not have to worry about only setting it on transfers
  /// that end on the boundary).
  ///
  /// This flag is currently only supported on Linux.
  /// On other systems, libusb_submit_transfer() will return
  /// LIBUSB_ERROR_NOT_SUPPORTED for every transfer where this flag is set.
  ///
  /// Available since libusb-1.0.9.
  static const int LIBUSB_TRANSFER_ADD_ZERO_PACKET = 8;
}

/// \ingroup libusb_asyncio
/// Isochronous packet descriptor.
class libusb_iso_packet_descriptor extends ffi.Struct {
  /// Length of data to request in this packet
  @ffi.UnsignedInt()
  external int length;

  /// Amount of data that was actually transferred
  @ffi.UnsignedInt()
  external int actual_length;

  /// Status code for this packet
  @ffi.Int32()
  external int status;
}

/// \ingroup libusb_asyncio
/// The generic USB transfer structure. The user populates this structure and
/// then submits it in order to request a transfer. After the transfer has
/// completed, the library populates the transfer with the results and passes
/// it back to the user.
class libusb_transfer extends ffi.Opaque {}

/// \ingroup libusb_misc
/// Capabilities supported by an instance of libusb on the current running
/// platform. Test if the loaded library supports a given capability by calling
/// \ref libusb_has_capability().
abstract class libusb_capability {
  /// The libusb_has_capability() API is available.
  static const int LIBUSB_CAP_HAS_CAPABILITY = 0;

  /// Hotplug support is available on this platform.
  static const int LIBUSB_CAP_HAS_HOTPLUG = 1;

  /// The library can access HID devices without requiring user intervention.
  /// Note that before being able to actually access an HID device, you may
  /// still have to call additional libusb functions such as
  /// \ref libusb_detach_kernel_driver().
  static const int LIBUSB_CAP_HAS_HID_ACCESS = 256;

  /// The library supports detaching of the default USB driver, using
  /// \ref libusb_detach_kernel_driver(), if one is set by the OS kernel
  static const int LIBUSB_CAP_SUPPORTS_DETACH_KERNEL_DRIVER = 257;
}

/// \ingroup libusb_lib
/// Log message levels.
/// - LIBUSB_LOG_LEVEL_NONE (0)    : no messages ever printed by the library (default)
/// - LIBUSB_LOG_LEVEL_ERROR (1)   : error messages are printed to stderr
/// - LIBUSB_LOG_LEVEL_WARNING (2) : warning and error messages are printed to stderr
/// - LIBUSB_LOG_LEVEL_INFO (3)    : informational messages are printed to stderr
/// - LIBUSB_LOG_LEVEL_DEBUG (4)   : debug and informational messages are printed to stderr
abstract class libusb_log_level {
  static const int LIBUSB_LOG_LEVEL_NONE = 0;
  static const int LIBUSB_LOG_LEVEL_ERROR = 1;
  static const int LIBUSB_LOG_LEVEL_WARNING = 2;
  static const int LIBUSB_LOG_LEVEL_INFO = 3;
  static const int LIBUSB_LOG_LEVEL_DEBUG = 4;
}

/// \ingroup libusb_lib
/// Log callback mode.
/// \see libusb_set_log_cb()
abstract class libusb_log_cb_mode {
  /// Callback function handling all log mesages.
  static const int LIBUSB_LOG_CB_GLOBAL = 1;

  /// Callback function handling context related log mesages.
  static const int LIBUSB_LOG_CB_CONTEXT = 2;
}

/// \ingroup libusb_lib
/// Callback function for handling log messages.
/// \param ctx the context which is related to the log message, or NULL if it
/// is a global log message
/// \param level the log level, see \ref libusb_log_level for a description
/// \param str the log message
/// \see libusb_set_log_cb()
typedef libusb_log_cb = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<libusb_context>, ffi.Int32, ffi.Pointer<ffi.Char>)>>;

/// \ingroup libusb_poll
/// File descriptor for polling
class libusb_pollfd extends ffi.Struct {
  /// Numeric file descriptor
  @ffi.Int()
  external int fd;

  /// Event flags to poll for from <poll.h>. POLLIN indicates that you
  /// should monitor this file descriptor for becoming ready to read from,
  /// and POLLOUT indicates that you should monitor this file descriptor for
  /// nonblocking write readiness.
  @ffi.Short()
  external int events;
}

/// \ingroup libusb_poll
/// Callback function, invoked when a new file descriptor should be added
/// to the set of file descriptors monitored for events.
/// \param fd the new file descriptor
/// \param events events to monitor for, see \ref libusb_pollfd for a
/// description
/// \param user_data User data pointer specified in
/// libusb_set_pollfd_notifiers() call
/// \see libusb_set_pollfd_notifiers()
typedef libusb_pollfd_added_cb = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Short, ffi.Pointer<ffi.Void>)>>;

/// \ingroup libusb_poll
/// Callback function, invoked when a file descriptor should be removed from
/// the set of file descriptors being monitored for events. After returning
/// from this callback, do not use that file descriptor again.
/// \param fd the file descriptor to stop monitoring
/// \param user_data User data pointer specified in
/// libusb_set_pollfd_notifiers() call
/// \see libusb_set_pollfd_notifiers()
typedef libusb_pollfd_removed_cb = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>;

/// \ingroup libusb_hotplug
///
/// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
///
/// Flags for hotplug events
abstract class libusb_hotplug_flag {
  /// Default value when not using any flags.
  static const int LIBUSB_HOTPLUG_NO_FLAGS = 0;

  /// Arm the callback and fire it for all matching currently attached devices.
  static const int LIBUSB_HOTPLUG_ENUMERATE = 1;
}

/// \ingroup libusb_hotplug
///
/// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
///
/// Hotplug events
abstract class libusb_hotplug_event {
  /// A device has been plugged in and is ready to use
  static const int LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED = 1;

  /// A device has left and is no longer available.
  /// It is the user's responsibility to call libusb_close on any handle associated with a disconnected device.
  /// It is safe to call libusb_get_device_descriptor on a device that has left
  static const int LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT = 2;
}

/// \ingroup libusb_hotplug
/// Hotplug callback function type. When requesting hotplug event notifications,
/// you pass a pointer to a callback function of this type.
///
/// This callback may be called by an internal event thread and as such it is
/// recommended the callback do minimal processing before returning.
///
/// libusb will call this function later, when a matching event had happened on
/// a matching device. See \ref libusb_hotplug for more information.
///
/// It is safe to call either libusb_hotplug_register_callback() or
/// libusb_hotplug_deregister_callback() from within a callback function.
///
/// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
///
/// \param ctx            context of this notification
/// \param device         libusb_device this event occurred on
/// \param event          event that occurred
/// \param user_data      user data provided when this callback was registered
/// \returns bool whether this callback is finished processing events.
/// returning 1 will cause this callback to be deregistered
typedef libusb_hotplug_callback_fn
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<libusb_context>, ffi.Pointer<libusb_device>, ffi.Int32, ffi.Pointer<ffi.Void>)>>;

/// \ingroup libusb_hotplug
/// Callback handle.
///
/// Callbacks handles are generated by libusb_hotplug_register_callback()
/// and can be used to deregister callbacks. Callback handles are unique
/// per libusb_context and it is safe to call libusb_hotplug_deregister_callback()
/// on an already deregisted callback.
///
/// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
///
/// For more information, see \ref libusb_hotplug.
typedef libusb_hotplug_callback_handle = ffi.Int;

/// \ingroup libusb_lib
/// Available option values for libusb_set_option().
abstract class libusb_option {
  /// Set the log message verbosity.
  ///
  /// The default level is LIBUSB_LOG_LEVEL_NONE, which means no messages are ever
  /// printed. If you choose to increase the message verbosity level, ensure
  /// that your application does not close the stderr file descriptor.
  ///
  /// You are advised to use level LIBUSB_LOG_LEVEL_WARNING. libusb is conservative
  /// with its message logging and most of the time, will only log messages that
  /// explain error conditions and other oddities. This will help you debug
  /// your software.
  ///
  /// If the LIBUSB_DEBUG environment variable was set when libusb was
  /// initialized, this function does nothing: the message verbosity is fixed
  /// to the value in the environment variable.
  ///
  /// If libusb was compiled without any message logging, this function does
  /// nothing: you'll never get any messages.
  ///
  /// If libusb was compiled with verbose debug message logging, this function
  /// does nothing: you'll always get messages from all levels.
  static const int LIBUSB_OPTION_LOG_LEVEL = 0;

  /// Use the UsbDk backend for a specific context, if available.
  ///
  /// This option should be set immediately after calling libusb_init(), otherwise
  /// unspecified behavior may occur.
  ///
  /// Only valid on Windows.
  static const int LIBUSB_OPTION_USE_USBDK = 1;
}

const int ZERO_SIZED_ARRAY = 0;

const int LIBUSB_API_VERSION = 16777479;

const int LIBUSBX_API_VERSION = 16777479;

const int LIBUSB_DT_DEVICE_SIZE = 18;

const int LIBUSB_DT_CONFIG_SIZE = 9;

const int LIBUSB_DT_INTERFACE_SIZE = 9;

const int LIBUSB_DT_ENDPOINT_SIZE = 7;

const int LIBUSB_DT_ENDPOINT_AUDIO_SIZE = 9;

const int LIBUSB_DT_HUB_NONVAR_SIZE = 7;

const int LIBUSB_DT_SS_ENDPOINT_COMPANION_SIZE = 6;

const int LIBUSB_DT_BOS_SIZE = 5;

const int LIBUSB_DT_DEVICE_CAPABILITY_SIZE = 3;

const int LIBUSB_BT_USB_2_0_EXTENSION_SIZE = 7;

const int LIBUSB_BT_SS_USB_DEVICE_CAPABILITY_SIZE = 10;

const int LIBUSB_BT_CONTAINER_ID_SIZE = 20;

const int LIBUSB_DT_BOS_MAX_SIZE = 42;

const int LIBUSB_ENDPOINT_ADDRESS_MASK = 15;

const int LIBUSB_ENDPOINT_DIR_MASK = 128;

const int LIBUSB_TRANSFER_TYPE_MASK = 3;

const int LIBUSB_ISO_SYNC_TYPE_MASK = 12;

const int LIBUSB_ISO_USAGE_TYPE_MASK = 48;

const int LIBUSB_CONTROL_SETUP_SIZE = 8;

const int LIBUSB_ERROR_COUNT = 14;

const int LIBUSB_HOTPLUG_MATCH_ANY = -1;
